#!/command/with-contenv bash
#shellcheck shell=bash disable=SC1091,SC2174
# -----------------------------------------------------------------------------------
# Copyright 2020-2024 Ramon F. Kolb - licensed under the terms and conditions
# of GPLv3. The terms and conditions of this license are included with the Github
# distribution of this package, and are also available here:
# https://github.com/sdr-enthusiasts/docker-planefence/
#
# This package may incorporate other software and license terms.
# -----------------------------------------------------------------------------------
#
# ATTENTION -- DO NOT MAKE THIS SCRIPT INTO A S6 DEPENDENCY FOR RUNNING PLANEFENCE
# IT SHOULD RUN AS A ONESHOT SERVICE IN PARALLEL WITH OTHER SERVICES

APPNAME="$(hostname)/get-openskydb"
source "/scripts/common"
s6wrap=(s6wrap --quiet --timestamps --prepend="${APPNAME}" --args)

# ----------------------------
# First - householding stuff:

mkdir -p -m 0700 /usr/share/planefence/persist/.internal

savedfile="$(find "/usr/share/planefence/persist/.internal/" -name "aircraft-database-complete-*" -print0 | xargs -r -0 ls -1 -t | head -1)"
if [[ -z "$savedfile" ]]; then
  mv /usr/share/planefence/stage/aircraft-database-complete-*.csv "/usr/share/planefence/persist/.internal/" >/dev/null 2>&1 || true
  savedfile="$(find "/usr/share/planefence/persist/.internal/" -name "aircraft-database-complete-*" -print0 | xargs -r -0 ls -1 -t | head -1)"
fi
savedfile="${savedfile##*/}"
latestfile="$(curl -sSL https://opensky-network.org/datasets/metadata/ | sed -n 's|.*/\(aircraft-database-complete-[0-9-]\+\.csv\).*|\1|p' | sort -ru | head -1)"

# Cleanup all but the newest OpenSkyDB files
find /usr/share/planefence/stage/ -type f -name "aircraft-database-complete-*.csv" -printf '%T@ %p\n'| sort -g | head -n -1 | cut -d ' ' -f 2 | xargs rm -f
find /usr/share/planefence/persist/.internal/ -type f -name "aircraft-database-complete-*.csv" -printf '%T@ %p\n'| sort -g | head -n -1 | cut -d ' ' -f 2 | xargs rm -f

# Create a link to savedfile early in the process so it's there when Planefence needs it.
# If there's a new file, we'll replace it once we pull the latest OpenSkyDB
if [[ -n "$savedfile" ]]; then ln -sf "/usr/share/planefence/persist/.internal/$savedfile" "/run/OpenSkyDB.csv"; fi

# Now start checking for a newer version of OpenSkyDB:
if [[ -n "$latestfile" && -n "$savedfile" && "$savedfile" != "$latestfile" ]]; then
  # We gotta get a newer file. Note - it's initially written to /tmp to avoid the system thinking that a partial/failed download could be used
  "${s6wrap[@]}" echo "Current OpenSky database: $savedfile. Getting newest one: $latestfile ... this may take a while!"
  if ! "${s6wrap[@]}" curl --compressed -sSL --fail -o "/tmp/$latestfile" "https://opensky-network.org/datasets/metadata/$latestfile"; then
    "${s6wrap[@]}" echo "Download of https://opensky-network.org/datasets/metadata/$latestfile failed; sticking with $savedfile"
    rm -f "/tmp/$latestfile"
  else
    mv -f "/tmp/$latestfile" "/usr/share/planefence/persist/.internal/"
    ln -sf "/usr/share/planefence/persist/.internal/$latestfile" "/run/OpenSkyDB.csv"
    "${s6wrap[@]}" echo "Downloaded newest OpenSkyDB - $latestfile"
    rm -f "$savedfile"
  fi
elif [[ -n "$savedfile" && "$savedfile" == "$latestfile" ]]; then
  "${s6wrap[@]}" echo "Current OpenSky database $savedfile is up to date! No download needed."
elif [[ -n "$savedfile" ]]; then
  "${s6wrap[@]}" echo "Couldn't download https://opensky-network.org/datasets/metadata/$latestfile; sticking with $savedfile"
else
  "${s6wrap[@]}" echo "Couldn't download https://opensky-network.org/datasets/metadata/$latestfile and no existing OpenSkyDB in container; disabling OpenSkyDB lookups" 
  rm -f "/run/OpenSkyDB.csv"
fi
